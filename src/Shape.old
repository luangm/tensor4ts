export default class Shape {

  private readonly _length: number;
  private readonly _offset: number;
  private readonly _order: string;
  private readonly _rank: number;
  private readonly _shape: number[];
  private readonly _shapeStrides: number[];
  private readonly _strides: number[];

  get length() {
    return this._length;
  }

  get offset() {
    return this._offset;
  }

  get order() {
    return this._order;
  }

  get rank() {
    return this._rank;
  }

  get shape() {
    return this._shape;
  }

  get strides() {
    return this._strides;
  }

  constructor(shape: number[], strides?: number[], offset: number = 0, order: string = "c") {
    this._shape = shape;
    this._rank = shape.length;
    this._shapeStrides = Shape.getStrides(shape);
    this._strides = strides || this._shapeStrides;
    this._length = Shape.getLength(shape);
    this._offset = offset;
    this._order = order;
  }

  private static getLength(shape: number[]): number {
    let mul = 1;
    for (let dim of shape) {
      mul *= dim;
    }
    return mul;
  }

  private static getStrides(shape: number[]): number[] {
    let rank = shape.length;
    let strides = new Array(rank);

    let val = 1;
    for (let i = rank - 1; i >= 0; i--) {
      strides[i] = val;
      val *= shape[i];
    }

    return strides;
  }

  /**
   * This reverses getOffset
   */
  getIndices(offset: number): number[] {
    let indices = new Array(this.rank);
    for (let i = 0; i < this.rank; i++) {
      indices[i] = Math.floor(offset / this._shapeStrides[i]);
      offset %= this._shapeStrides[i];
    }
    return indices;
  }

  getOffset(indices: number[]): number {
    let offset = this.offset;
    for (let i = 0; i < this.rank; i++) {
      offset += indices[i] * this.strides[i];
    }
    return offset;
  }

}